/**
 * generated by Xtext 2.9.1
 */
package de.protos.ontolizer.ontolizer.impl;

import de.protos.ontolizer.ontolizer.EdgeList;
import de.protos.ontolizer.ontolizer.Node;
import de.protos.ontolizer.ontolizer.NodeType;
import de.protos.ontolizer.ontolizer.OntolizerPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.protos.ontolizer.ontolizer.impl.NodeImpl#getNodeType <em>Node Type</em>}</li>
 *   <li>{@link de.protos.ontolizer.ontolizer.impl.NodeImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.protos.ontolizer.ontolizer.impl.NodeImpl#getSummary <em>Summary</em>}</li>
 *   <li>{@link de.protos.ontolizer.ontolizer.impl.NodeImpl#getEdgeLists <em>Edge Lists</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeImpl extends MinimalEObjectImpl.Container implements Node
{
  /**
   * The cached value of the '{@link #getNodeType() <em>Node Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeType()
   * @generated
   * @ordered
   */
  protected NodeType nodeType;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSummary() <em>Summary</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSummary()
   * @generated
   * @ordered
   */
  protected EList<String> summary;

  /**
   * The cached value of the '{@link #getEdgeLists() <em>Edge Lists</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEdgeLists()
   * @generated
   * @ordered
   */
  protected EList<EdgeList> edgeLists;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OntolizerPackage.Literals.NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeType getNodeType()
  {
    if (nodeType != null && nodeType.eIsProxy())
    {
      InternalEObject oldNodeType = (InternalEObject)nodeType;
      nodeType = (NodeType)eResolveProxy(oldNodeType);
      if (nodeType != oldNodeType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, OntolizerPackage.NODE__NODE_TYPE, oldNodeType, nodeType));
      }
    }
    return nodeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeType basicGetNodeType()
  {
    return nodeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNodeType(NodeType newNodeType)
  {
    NodeType oldNodeType = nodeType;
    nodeType = newNodeType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OntolizerPackage.NODE__NODE_TYPE, oldNodeType, nodeType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OntolizerPackage.NODE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getSummary()
  {
    if (summary == null)
    {
      summary = new EDataTypeEList<String>(String.class, this, OntolizerPackage.NODE__SUMMARY);
    }
    return summary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EdgeList> getEdgeLists()
  {
    if (edgeLists == null)
    {
      edgeLists = new EObjectContainmentEList<EdgeList>(EdgeList.class, this, OntolizerPackage.NODE__EDGE_LISTS);
    }
    return edgeLists;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OntolizerPackage.NODE__EDGE_LISTS:
        return ((InternalEList<?>)getEdgeLists()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OntolizerPackage.NODE__NODE_TYPE:
        if (resolve) return getNodeType();
        return basicGetNodeType();
      case OntolizerPackage.NODE__NAME:
        return getName();
      case OntolizerPackage.NODE__SUMMARY:
        return getSummary();
      case OntolizerPackage.NODE__EDGE_LISTS:
        return getEdgeLists();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OntolizerPackage.NODE__NODE_TYPE:
        setNodeType((NodeType)newValue);
        return;
      case OntolizerPackage.NODE__NAME:
        setName((String)newValue);
        return;
      case OntolizerPackage.NODE__SUMMARY:
        getSummary().clear();
        getSummary().addAll((Collection<? extends String>)newValue);
        return;
      case OntolizerPackage.NODE__EDGE_LISTS:
        getEdgeLists().clear();
        getEdgeLists().addAll((Collection<? extends EdgeList>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OntolizerPackage.NODE__NODE_TYPE:
        setNodeType((NodeType)null);
        return;
      case OntolizerPackage.NODE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case OntolizerPackage.NODE__SUMMARY:
        getSummary().clear();
        return;
      case OntolizerPackage.NODE__EDGE_LISTS:
        getEdgeLists().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OntolizerPackage.NODE__NODE_TYPE:
        return nodeType != null;
      case OntolizerPackage.NODE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case OntolizerPackage.NODE__SUMMARY:
        return summary != null && !summary.isEmpty();
      case OntolizerPackage.NODE__EDGE_LISTS:
        return edgeLists != null && !edgeLists.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", summary: ");
    result.append(summary);
    result.append(')');
    return result.toString();
  }

} //NodeImpl
