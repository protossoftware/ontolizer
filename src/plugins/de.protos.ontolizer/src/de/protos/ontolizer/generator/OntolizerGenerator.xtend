/*
 * generated by Xtext 2.9.2
 */
package de.protos.ontolizer.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.protos.ontolizer.ontolizer.Model
import de.protos.ontolizer.ontolizer.Edge
import de.protos.ontolizer.ontolizer.EdgeList
import org.eclipse.emf.common.util.EList
import de.protos.ontolizer.ontolizer.NodeType
import de.protos.ontolizer.ontolizer.EdgeType
import de.protos.ontolizer.ontolizer.Node
import de.protos.ontolizer.ontolizer.View

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class OntolizerGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		generateViewFiles(resource, fsa)

		generateAntBuildfile(fsa)
	}

	def generateDotFileContent(Model model, View view) '''
		
			digraph {
				«FOR node : filterNodesForNodeTypes(model.nodes, view.nodeTypes)»
					«node.name» [«if(node.summary.nullOrEmpty) "" else 'label=\"'+node.name+"\\n"+node.summary+'\" '»«node.getNodeFormatString»];				
					«FOR edgeList : node.edgeLists.filterEdgeListsForEdgeTypes(view.edgeTypes)»
						«FOR edge : edgeList.edges.filterEdgesForNodeTypes(view.nodeTypes)»
							«node.name» -> «edge.targetNode.name» [ label = "«edgeList.edgeType.name»" ];
						«ENDFOR» 
					«ENDFOR» 
				«ENDFOR» 			
			}
	'''

	def getNodeFormatString(Node node) {

		val formatList = newArrayList()
		if (!node.nodeType.shape.nullOrEmpty)
			formatList += 'shape=' + node.nodeType.shape

		if (!node.nodeType.color.nullOrEmpty)
			formatList += 'fillcolor=' + node.nodeType.color

		if (!node.nodeType.style.nullOrEmpty)
			formatList += 'style=' + node.nodeType.style

		formatList.filter[s|!s.empty].join(',')
	}

	def private generateAntBuildfile(IFileSystemAccess2 fsa) {
		fsa.generateFile("build.xml", generateDotBuildfileContent())
	}

	// ant buildfile generator for dot	
	def private generateDotBuildfileContent() '''
		<?xml version="1.0" encoding="UTF-8"?>
		<!-- ====================================================================== 
		     Generates bitmap images from DOT files for process documentation
		     ====================================================================== -->
		<project name="builddotfiles" default="build">
			<description>
			   	Generates bitmap images from DOT files for process documentation
			   </description>
		
			<target name="build" description="description" depends="init-dot.binpath">
				<apply executable="${dot.binpath}" dest="./">
					<arg value="-Tjpg" />
					<srcfile />
					<arg value="-o" />
					<targetfile />
					<fileset dir="./" includes="*.dot" />
					<mapper type="glob" from="*.dot" to="*.jpg" />
				</apply>
			</target>
		
			<target name="init-dot.binpath" unless="dot.binpath">
				<property environment="env" />
				<condition property="dot.binpath" value="${env.DOT_PATH}/dot" else="dot">
					<isset property="env.DOT_PATH" />
				</condition>
			</target>
		
		</project>
	'''

	def generateViewFiles(Resource resource, IFileSystemAccess2 fsa) {
		val model = resource.contents.head as Model
		model.views.forall[e|fsa.generateFile('View_' + e.name + '.dot', generateViewFileContent(model, e)); true]
	}

	def filterNodesForNodeTypes(EList<Node> nodes, EList<NodeType> nodeTypes) {
		if (nodeTypes.empty)
			nodes
		else
			nodes.filter[e|nodeTypes.contains(e.nodeType)]
	}

	def filterEdgeListsForEdgeTypes(Iterable<EdgeList> edgeLists, EList<EdgeType> edgeTypes) {
		if (edgeTypes.empty)
			edgeLists
		else
			edgeLists.filter[e|edgeTypes.contains(e.edgeType)]
	}

	def filterEdgesForNodeTypes(Iterable<Edge> edges, EList<NodeType> nodeTypes) {
		if (nodeTypes.empty)
			edges
		else
			edges.filter[e|nodeTypes.contains(e.targetNode.nodeType)]
	}

	def generateViewFileContent(Model model, View view) {
		generateDotFileContent(model, view)
	}

}
