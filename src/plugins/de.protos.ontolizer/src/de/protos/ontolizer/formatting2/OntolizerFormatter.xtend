/*
 * generated by Xtext 2.9.2
 */
package de.protos.ontolizer.formatting2

import com.google.inject.Inject
import de.protos.ontolizer.ontolizer.EdgeList
import de.protos.ontolizer.ontolizer.EdgeType
import de.protos.ontolizer.ontolizer.Model
import de.protos.ontolizer.ontolizer.Node
import de.protos.ontolizer.ontolizer.NodeType
import de.protos.ontolizer.ontolizer.View
import de.protos.ontolizer.services.OntolizerGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

import static de.protos.ontolizer.ontolizer.OntolizerPackage.Literals.*
import de.protos.ontolizer.ontolizer.Edge

class OntolizerFormatter extends AbstractFormatter2 {
	
	@Inject extension OntolizerGrammarAccess
	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (NodeType nodeTypes : model.getNodeTypes()) {
			nodeTypes.format;
		}
		for (EdgeType edgeTypes : model.getEdgeTypes()) {
			edgeTypes.format;
		}
		for (Node nodes : model.getNodes()) {
			nodes.format;
		}
		for (View views : model.getViews()) {
			views.format;
		}
	}

	def dispatch void format(NodeType nodeType, extension IFormattableDocument document) {
		val name = nodeType.regionFor.feature(NODE_TYPE__NAME)
		val open = name
		val close = nodeType.regionFor.keyword(";")

		name.surround[oneSpace]
		name.append[newLine]

		interior(open, close)[indent]
		nodeType.regionFor.feature(NODE_TYPE__SHAPE).append[newLine]
		nodeType.regionFor.feature(NODE_TYPE__COLOR).append[newLine]
		nodeType.regionFor.feature(NODE_TYPE__STYLE).append[newLine]
		close.append[newLines = 2]
	}

	def dispatch void format(EdgeType nodeType, extension IFormattableDocument document) {
		val name = nodeType.regionFor.feature(EDGE_TYPE__NAME)
		val open = name
		val close = nodeType.regionFor.keyword(";")

			name.surround[oneSpace]
		close.append[newLines = 2]
	}

	def dispatch void format(Node node, extension IFormattableDocument document) {
		val name = node.regionFor.feature(NODE__NAME)
		val open = name
		val close = node.regionFor.keyword(";")

		name.surround[oneSpace]
		name.append[newLine]

		interior(open, close)[indent]
		node.regionFor.feature(NODE__SUMMARY).append[newLine]
		for (EdgeList edgeList : node.getEdgeLists()) {
			edgeList.format;
		}
		close.append[newLines = 2]

	}

	def dispatch void format(View view, extension IFormattableDocument document) {
		val name = view.regionFor.feature(VIEW__NAME)
		val open = name
		val close = view.regionFor.keyword(";")

		name.surround[oneSpace]
		name.append[newLine]

		interior(open, close)[indent]

		view.regionFor.keyword("edgeTypes").prepend[newLine]
		view.regionFor.feature(VIEW__EDGE_TYPES).surround[oneSpace]
		view.regionFor.keyword("nodeTypes").prepend[newLine]
		view.regionFor.feature(VIEW__NODE_TYPES).prepend[oneSpace]

		close.prepend[newLine]
		close.append[newLines = 2]
	}

	def dispatch void format(Edge entity, extension IFormattableDocument document) {
		entity.append[newLine]
	}

}
