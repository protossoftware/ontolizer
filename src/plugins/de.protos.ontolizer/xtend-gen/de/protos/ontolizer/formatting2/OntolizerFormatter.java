/**
 * generated by Xtext 2.9.2
 */
package de.protos.ontolizer.formatting2;

import com.google.inject.Inject;
import de.protos.ontolizer.ontolizer.Edge;
import de.protos.ontolizer.ontolizer.EdgeList;
import de.protos.ontolizer.ontolizer.EdgeType;
import de.protos.ontolizer.ontolizer.Model;
import de.protos.ontolizer.ontolizer.Node;
import de.protos.ontolizer.ontolizer.NodeType;
import de.protos.ontolizer.ontolizer.OntolizerPackage;
import de.protos.ontolizer.ontolizer.View;
import de.protos.ontolizer.services.OntolizerGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionsFinder;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class OntolizerFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private OntolizerGrammarAccess _ontolizerGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<NodeType> _nodeTypes = model.getNodeTypes();
    for (final NodeType nodeTypes : _nodeTypes) {
      document.<NodeType>format(nodeTypes);
    }
    EList<EdgeType> _edgeTypes = model.getEdgeTypes();
    for (final EdgeType edgeTypes : _edgeTypes) {
      document.<EdgeType>format(edgeTypes);
    }
    EList<Node> _nodes = model.getNodes();
    for (final Node nodes : _nodes) {
      document.<Node>format(nodes);
    }
    EList<View> _views = model.getViews();
    for (final View views : _views) {
      document.<View>format(views);
    }
  }
  
  protected void _format(final NodeType nodeType, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(nodeType);
    final ISemanticRegion name = _regionFor.feature(OntolizerPackage.Literals.NODE_TYPE__NAME);
    final ISemanticRegion open = name;
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(nodeType);
    final ISemanticRegion close = _regionFor_1.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(name, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(name, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_2);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(nodeType);
    ISemanticRegion _feature = _regionFor_2.feature(OntolizerPackage.Literals.NODE_TYPE__SHAPE);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_feature, _function_3);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(nodeType);
    ISemanticRegion _feature_1 = _regionFor_3.feature(OntolizerPackage.Literals.NODE_TYPE__COLOR);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_feature_1, _function_4);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(nodeType);
    ISemanticRegion _feature_2 = _regionFor_4.feature(OntolizerPackage.Literals.NODE_TYPE__STYLE);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_feature_2, _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(close, _function_6);
  }
  
  protected void _format(final EdgeType nodeType, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(nodeType);
    final ISemanticRegion name = _regionFor.feature(OntolizerPackage.Literals.EDGE_TYPE__NAME);
    final ISemanticRegion open = name;
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(nodeType);
    final ISemanticRegion close = _regionFor_1.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(name, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(close, _function_1);
  }
  
  protected void _format(final Node node, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(node);
    final ISemanticRegion name = _regionFor.feature(OntolizerPackage.Literals.NODE__NAME);
    final ISemanticRegion open = name;
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(node);
    final ISemanticRegion close = _regionFor_1.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(name, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(name, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_2);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _feature = _regionFor_2.feature(OntolizerPackage.Literals.NODE__SUMMARY);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_feature, _function_3);
    EList<EdgeList> _edgeLists = node.getEdgeLists();
    for (final EdgeList edgeList : _edgeLists) {
      document.<EdgeList>format(edgeList);
    }
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(close, _function_4);
  }
  
  protected void _format(final View view, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(view);
    final ISemanticRegion name = _regionFor.feature(OntolizerPackage.Literals.VIEW__NAME);
    final ISemanticRegion open = name;
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(view);
    final ISemanticRegion close = _regionFor_1.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(name, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(name, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_2);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(view);
    ISemanticRegion _keyword = _regionFor_2.keyword("edgeTypes");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword, _function_3);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(view);
    ISemanticRegion _feature = _regionFor_3.feature(OntolizerPackage.Literals.VIEW__EDGE_TYPES);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(_feature, _function_4);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(view);
    ISemanticRegion _keyword_1 = _regionFor_4.keyword("nodeTypes");
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_1, _function_5);
    ISemanticRegionsFinder _regionFor_5 = this.textRegionExtensions.regionFor(view);
    ISemanticRegion _feature_1 = _regionFor_5.feature(OntolizerPackage.Literals.VIEW__NODE_TYPES);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_feature_1, _function_6);
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(close, _function_7);
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(close, _function_8);
  }
  
  protected void _format(final Edge entity, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Edge>append(entity, _function);
  }
  
  public void format(final Object entity, final IFormattableDocument document) {
    if (entity instanceof XtextResource) {
      _format((XtextResource)entity, document);
      return;
    } else if (entity instanceof Edge) {
      _format((Edge)entity, document);
      return;
    } else if (entity instanceof EdgeType) {
      _format((EdgeType)entity, document);
      return;
    } else if (entity instanceof Model) {
      _format((Model)entity, document);
      return;
    } else if (entity instanceof Node) {
      _format((Node)entity, document);
      return;
    } else if (entity instanceof NodeType) {
      _format((NodeType)entity, document);
      return;
    } else if (entity instanceof View) {
      _format((View)entity, document);
      return;
    } else if (entity instanceof EObject) {
      _format((EObject)entity, document);
      return;
    } else if (entity == null) {
      _format((Void)null, document);
      return;
    } else if (entity != null) {
      _format(entity, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(entity, document).toString());
    }
  }
}
